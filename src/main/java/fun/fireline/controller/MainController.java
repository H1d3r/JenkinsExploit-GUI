package fun.fireline.controller;

import com.jfoenix.controls.JFXButton;
import fun.fireline.core.Constants;
import fun.fireline.exp.tools.dnslogSetting;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Window;
import org.apache.log4j.Logger;

import java.awt.*;
import java.net.*;
import java.util.HashMap;
import java.util.Map;

// 主页面相关逻辑
public class MainController  {
    public static  Logger logger = Logger.getLogger(MainController.class);
    @FXML
    private MenuItem proxySetupBtn;
    @FXML
    private MenuItem dnslogSetupBtn;
    @FXML
    private Label tool_name;
    @FXML
    private Label author;
    @FXML
    private Label proxyStatusLabel;
    @FXML
    private Label dnslogStatusLable;
    @FXML
    private VBox selectButton;      // 漏洞种类按钮
    @FXML
    private AnchorPane content;     // 按钮对应的功能
    @FXML
    private JFXButton initial;

    public static Map<String, Object> history = new HashMap<String, Object>();

    // 设置相关信息保存
    public static Map<String, Object> settingInfo = new HashMap();

    // 监听菜单事件
    private void initToolbar() {
        //dnslog 设置
        this.dnslogSetupBtn.setOnAction((event) -> {
            Alert inputDialog = new Alert(Alert.AlertType.NONE);
            Window window = inputDialog.getDialogPane().getScene().getWindow();
            window.setOnCloseRequest((e)->{
                window.hide();
            });
            inputDialog.setTitle("dnslog设置");
            ToggleGroup statusGroup = new ToggleGroup();
            RadioButton enableRadio = new RadioButton("启用");
            RadioButton disableRadio = new RadioButton("禁用");
            enableRadio.setToggleGroup(statusGroup);
            disableRadio.setToggleGroup(statusGroup);
            disableRadio.setSelected(true);
            HBox statusHbox = new HBox();
            statusHbox.setSpacing(10.0D);
            statusHbox.getChildren().add(enableRadio);
            statusHbox.getChildren().add(disableRadio);
            GridPane dnslogGridPane = new GridPane();
            dnslogGridPane.setVgap(15.0D);
            dnslogGridPane.setPadding(new Insets(20.0D,20.0D,0.0D,10.0D));
            Label typeLable = new Label("dnslog平台：");
            ComboBox typeCombo = new ComboBox();
            typeCombo.setItems(FXCollections.observableArrayList(new String[]{"dnslog.pw","ceye.io"}));
            typeCombo.getSelectionModel().select(0);
            Label domainLable = new Label("dnslog子域名：");
            TextField domainText = new TextField("");
            Label tokenLable = new Label("api token：");
            TextField tokenText = new TextField("");
            Button cancelBtn = new Button("取消");
            Button saveBtn = new Button("保存");

            saveBtn.setOnAction((e)->{
                if(disableRadio.isSelected()){
                    settingInfo.put("domain",(Object) null);
                    dnslogStatusLable.setText("");
                    inputDialog.getDialogPane().getScene().getWindow().hide();
                }else {
                    if(!domainText.getText().trim().equals("")){
                        dnslogSetting dnslogSetting = new dnslogSetting();
                        dnslogSetting.setDomain(domainText.getText().trim());
                        dnslogSetting.setToken(tokenText.getText().trim());
                        dnslogSetting.setType(typeCombo.getValue().toString());
                    }
                }
                dnslogStatusLable.setText("dnslog生效中");
                inputDialog.getDialogPane().getScene().getWindow().hide();
            });

            cancelBtn.setOnAction((e)->{
                inputDialog.getDialogPane().getScene().getWindow().hide();
            });
            dnslogGridPane.add(statusHbox,1,0);
            dnslogGridPane.add(typeLable,0,1);
            dnslogGridPane.add(typeCombo,1,1);
            dnslogGridPane.add(domainLable,0,2);
            dnslogGridPane.add(domainText,1,2);
            dnslogGridPane.add(tokenLable,0,3);
            dnslogGridPane.add(tokenText,1,3);
            HBox buttonBox = new HBox();
            buttonBox.setSpacing(20.0D);
            buttonBox.setAlignment(Pos.CENTER);
            buttonBox.getChildren().add(cancelBtn);
            buttonBox.getChildren().add(saveBtn);
            GridPane.setColumnSpan(buttonBox,2);
            dnslogGridPane.add(buttonBox,0,4);
            inputDialog.getDialogPane().setContent(dnslogGridPane);
            inputDialog.showAndWait();
        });
    }

    // 加载
    @FXML
    public void initialize() {
        // 设置
        this.initToolbar();
        // 页脚
        this.tool_name.setText(String.format(this.tool_name.getText(), Constants.NAME, Constants.VERSION));
        this.author.setText(String.format(this.author.getText(), Constants.AUTHOR));

        this.initial.setOnAction((e) -> {
            try {
                Desktop.getDesktop().browse(new URL("https://github.com/thebeastofwar").toURI());
            } catch (Exception e1) {
                logger.debug(e1);
            }
        });

        // lambda 表达式获取 drawer 中的按钮，切换界面
        for (Node node: selectButton.getChildren()){
            if (node.getAccessibleText() != null){
                node.addEventHandler(MouseEvent.MOUSE_CLICKED, (e) -> {
                    refreshPage(node.getAccessibleText());
                });
            }
        }
        refreshPage("Jenkins");
    }

    private void refreshPage(String page){
        try {
            this.content.getChildren().clear();
            AnchorPane contentPage = FXMLLoader.load(getClass().getClassLoader().getResource("fxml/" + page + ".fxml"));

            this.content.getChildren().add(contentPage);
        } catch (Exception e) {
            logger.debug(e);
        }
    }

    public void setProxyStatusLabel(String value) {
        this.proxyStatusLabel.setText(value);
    }

}